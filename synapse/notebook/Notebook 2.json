{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "51b5c8db-9a34-4f8e-9bbe-3925344db857"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5c9e885b-e6e9-4aad-8ff0-49678f8f5001/resourceGroups/My_Azure_Synapse_Workshop/providers/Microsoft.Synapse/workspaces/asa-workshop-first-test/bigDataPools/SparkPool1",
				"name": "SparkPool1",
				"type": "Spark",
				"endpoint": "https://asa-workshop-first-test.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"avro_path_all_partitions = \"abfss://eventhublogs@asafirstworkshop.dfs.core.windows.net/synapse-log-hub/synapselogs/\"\n",
					"\n",
					"df_raw = spark.read \\\n",
					"    .format(\"avro\") \\\n",
					"    .option(\"recursiveFileLookup\", \"true\") \\\n",
					"    .load(avro_path_all_partitions)\n",
					"\n",
					"df_raw.show(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_raw.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, from_json\n",
					"from pyspark.sql.types import StructType, StructField, StringType"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Define expected schema for JSON inside Body\n",
					"body_schema = StructType([\n",
					"    StructField(\"time\", StringType()),\n",
					"    StructField(\"operationName\", StringType()),\n",
					"    StructField(\"category\", StringType()),\n",
					"    StructField(\"resourceId\", StringType()),\n",
					"    StructField(\"level\", StringType()),\n",
					"    StructField(\"location\", StringType())\n",
					"])"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Parse the Body column from binary to JSON and extract fields\n",
					"df_parsed = df_raw.withColumn(\"log\", from_json(col(\"Body\").cast(\"string\"), body_schema))\n",
					"\n",
					"# Select useful fields\n",
					"df_clean = df_parsed.select(\n",
					"    col(\"log.time\").alias(\"LogTime\"),\n",
					"    col(\"log.operationName\").alias(\"Operation\"),\n",
					"    col(\"log.category\").alias(\"Category\"),\n",
					"    col(\"log.level\").alias(\"Severity\"),\n",
					"    col(\"log.resourceId\").alias(\"ResourceId\"),\n",
					"    col(\"log.location\").alias(\"Location\")\n",
					")\n",
					"\n",
					"# Show cleaned data\n",
					"df_clean.show(10)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_clean_with_time = df_clean.withColumn(\"ReceivedAt\", col(\"EnqueuedTimeUtc\"))\n",
					"df_clean_with_time.show(5)"
				],
				"execution_count": null
			}
		]
	}
}